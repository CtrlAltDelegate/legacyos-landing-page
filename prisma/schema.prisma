// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts and authentication
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  firstName         String
  lastName          String
  familyName        String?
  role              UserRole @default(FAMILY_ADMIN)
  isEmailVerified   Boolean  @default(false)
  emailVerifiedAt   DateTime?
  subscriptionPlan  Plan     @default(FREE_TRIAL)
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  trialEndsAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  familyMembers     FamilyMember[]
  familyAdminOf     Family[]        @relation("FamilyAdmin")
  wingProgress      WingProgress[]
  actionItems       ActionItem[]
  quarterlyReports  QuarterlyReport[]
  sessions          UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Family structure - allows multiple family members
model Family {
  id           String   @id @default(cuid())
  name         String
  adminId      String
  legacyScore  Int      @default(0)
  netWorth     Float    @default(0)
  savingsRate  Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  admin         User           @relation("FamilyAdmin", fields: [adminId], references: [id])
  members       FamilyMember[]
  wingProgress  WingProgress[]
  actionItems   ActionItem[]
  quarterlyReports QuarterlyReport[]

  @@map("families")
}

model FamilyMember {
  id        String           @id @default(cuid())
  familyId  String
  userId    String
  role      FamilyMemberRole @default(MEMBER)
  joinedAt  DateTime         @default(now())

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([familyId, userId])
  @@map("family_members")
}

// Wing definitions and levels
model Wing {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  icon        String
  color       String
  description String
  order       Int

  levels       WingLevel[]
  wingProgress WingProgress[]

  @@map("wings")
}

model WingLevel {
  id          String @id @default(cuid())
  wingId      String
  level       Int
  name        String
  description String
  milestones  Json // Array of milestone objects with title, description, completed status
  order       Int

  wing Wing @relation(fields: [wingId], references: [id], onDelete: Cascade)

  @@unique([wingId, level])
  @@map("wing_levels")
}

// User progress tracking
model WingProgress {
  id             String   @id @default(cuid())
  userId         String
  familyId       String?
  wingId         String
  currentLevel   Int      @default(1)
  progressPoints Int      @default(0)
  completedMilestones Json @default("[]") // Array of completed milestone IDs
  lastActivity   DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  family Family? @relation(fields: [familyId], references: [id], onDelete: SetNull)
  wing   Wing    @relation(fields: [wingId], references: [id], onDelete: Cascade)

  @@unique([userId, wingId])
  @@map("wing_progress")
}

// Action items and task management
model ActionItem {
  id          String           @id @default(cuid())
  userId      String
  familyId    String?
  wingId      String?
  title       String
  description String
  priority    ActionPriority   @default(MEDIUM)
  status      ActionStatus     @default(PENDING)
  estimatedHours Int?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  family Family? @relation(fields: [familyId], references: [id], onDelete: SetNull)

  @@map("action_items")
}

// Quarterly reports and reviews
model QuarterlyReport {
  id              String   @id @default(cuid())
  userId          String
  familyId        String?
  quarter         Int
  year            Int
  legacyScore     Int
  netWorthChange  Float
  topAccomplishments Json
  areasForImprovement Json
  nextQuarterGoals Json
  generatedAt     DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  family Family? @relation(fields: [familyId], references: [id], onDelete: SetNull)

  @@unique([userId, quarter, year])
  @@map("quarterly_reports")
}

// Subscription and billing
model Subscription {
  id                 String              @id @default(cuid())
  userId             String              @unique
  stripeCustomerId   String?             @unique
  stripeSubscriptionId String?           @unique
  plan               Plan
  status             SubscriptionStatus
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  canceledAt         DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("subscriptions")
}

// Enums
enum UserRole {
  FAMILY_ADMIN
  FAMILY_MEMBER
  SUPER_ADMIN
}

enum FamilyMemberRole {
  ADMIN
  MEMBER
  CHILD
}

enum Plan {
  FREE_TRIAL
  CORE
  LEGACY_PLUS
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 